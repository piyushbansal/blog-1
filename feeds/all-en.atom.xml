<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>James Cooke</title><link href="http://jamescooke.info/" rel="alternate"></link><link href="http://jamescooke.info/feeds/all-en.atom.xml" rel="self"></link><id>http://jamescooke.info/</id><updated>2013-11-01T20:00:00+00:00</updated><entry><title>vi-nature everywhere - lightning talk</title><link href="http://jamescooke.info/vi-nature-everywhere-lightning-talk.html" rel="alternate"></link><updated>2013-11-01T20:00:00+00:00</updated><author><name>James</name></author><id>tag:jamescooke.info,2013-11-01:vi-nature-everywhere-lightning-talk.html</id><summary type="html">&lt;p&gt;vi-nature, the &amp;#8216;language&amp;#8217; of &lt;cite&gt;vim&lt;/cite&gt;. It&amp;#8217;s the reason that &lt;cite&gt;vim&lt;/cite&gt; works so well
for me. However, it does take some learning, and even after many months of use,
I&amp;#8217;d say I&amp;#8217;ve only just scratched the&amp;nbsp;surface.&lt;/p&gt;
&lt;p&gt;So if we&amp;#8217;re investing so much time and energy in learning this language, then
why not apply it to more tasks than just editing&amp;nbsp;files?&lt;/p&gt;
&lt;p&gt;In this five minute lighting talk I gave at &lt;a class="reference external" href="http://www.meetup.com/Vim-London/"&gt;Vim London&lt;/a&gt; this week, I delved into some of the benefits
and issues with using vi-nature for more than just&amp;nbsp;editing.&lt;/p&gt;
&lt;iframe src="//player.vimeo.com/video/78173248" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;The feedback after the talk was great - here are my&amp;nbsp;take-aways:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Check out &lt;a class="reference external" href="http://www.uzbl.org/"&gt;uzbl&lt;/a&gt; - it provides an interface layer
that can be programmed to different keybindings. Thanks&amp;nbsp;Nestor.&lt;/li&gt;
&lt;li&gt;Check out &lt;a class="reference external" href="http://awesome.naquadah.org/"&gt;Awesome Window Manager&lt;/a&gt; because it&amp;#8217;s completely operational without mouse. Thanks&amp;nbsp;Nestor.&lt;/li&gt;
&lt;li&gt;Write a blog post about &amp;#8216;vi-nature&amp;#8217; because there&amp;#8217;s not much about it on the web - Yes I will do this, thanks for the suggestion&amp;nbsp;Max.&lt;/li&gt;
&lt;li&gt;Check out Mac &lt;span class="caps"&gt;OSX&lt;/span&gt;&amp;#8217;s &lt;a class="reference external" href="https://github.com/jigish/slate"&gt;slate&lt;/a&gt; because it creates a programmable keyboard interface for window management. Thanks&amp;nbsp;David.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lots to follow up on and hopefully some ways to take vi-nature to more&amp;nbsp;places.&lt;/p&gt;
&lt;p&gt;Thanks for&amp;nbsp;reading!&lt;/p&gt;
</summary><category term="vim"></category><category term="talk"></category></entry><entry><title>Things to remember about decorators</title><link href="http://jamescooke.info/things-to-remember-about-decorators.html" rel="alternate"></link><updated>2013-10-22T20:00:00+01:00</updated><author><name>James</name></author><id>tag:jamescooke.info,2013-10-22:things-to-remember-about-decorators.html</id><summary type="html">&lt;p&gt;After an interview question about Python decorators which I stumbled over, I
promised myself that I would improve my knowledge of this metaprogramming&amp;nbsp;technique.&lt;/p&gt;
&lt;p&gt;These are my notes to myself on decorators - maybe they&amp;#8217;ll be helpful to
someone else who&amp;#8217;s improving their knowledge of decorators&amp;nbsp;too.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;A decorator is pure Pythonic syntatic&amp;nbsp;sugar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;A decorator is a Python callable that receives the decorated function and
returns a new function in its&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;For example, if there is a decorator called &lt;cite&gt;my_decorator&lt;/cite&gt; and we want to
decorate &lt;cite&gt;my_func&lt;/cite&gt; then&amp;#8230;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@my_decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;some stuff&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Is equivalent to&amp;nbsp;writing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;some stuff&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="n"&gt;my_func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The decorator callable is executed at load time, not at execution time. Here
is an example of a silly decorator that prints &amp;#8220;Hello World&amp;#8221; when the Python
file is loaded - there is nothing else in the&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;hello.py&lt;/cite&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;

&lt;span class="nd"&gt;@say_hello&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nothing&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c"&gt;# Do nothing just return&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;World&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When writing a decorator, remember to patch over the docstring of the wrapped
function. This can be done by accessing the passed function&amp;#8217;s &lt;cite&gt;__doc__&lt;/cite&gt;
attribute. Failing to do so will prevent doctest from testing the decorated&amp;nbsp;function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# Pass through the doc string&lt;/span&gt;
    &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When unit testing decorators, one strategy can be to manually call the
decorator on a mocked object and inspect how it interacts with&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a caching function which is used to speed up the Fibonacci&amp;nbsp;series.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# Keep a dict of values returned already&lt;/span&gt;
    &lt;span class="n"&gt;vals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now use the cache function as a&amp;nbsp;decorator.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@cache&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Fibonacci series&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; fib(1)&lt;/span&gt;
&lt;span class="sd"&gt;    1&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; fib(2)&lt;/span&gt;
&lt;span class="sd"&gt;    2&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Must be greater than 0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here&amp;#8217;s a unittest that asserts that the cache function only allows calls
through when there is no value saved in the &lt;cite&gt;vals&lt;/cite&gt; dict.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestCashDecorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;my_fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;my_fn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;my_fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;

        &lt;span class="n"&gt;wrapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;# First call gives a call count of 1&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# Second call keeps the call count at 1 - the cached value is used&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# Subsequent call with a new value increased the call count&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Make sure the scope of variables used in the decorators is correct, this is
&lt;a class="reference external" href="http://simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/"&gt;an interesting article by Simeon Franklin about decorators and scope&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If in doubt, extend any tests to test a second decorated function and ensure
that the two functions do not effect each&amp;nbsp;other.&lt;/p&gt;
&lt;p&gt;Below is a test that aims to check that cache dictionaries are not shared
between instances of the &lt;cite&gt;cache&lt;/cite&gt; decorator, it is appended to the
&lt;cite&gt;test_cache&lt;/cite&gt; test&amp;nbsp;above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Check that the vals dict isn&amp;#39;t shared between other decor&lt;/span&gt;
&lt;span class="n"&gt;my_other_fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;other fn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;my_other_fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;other hi&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# Create other wrapped function&lt;/span&gt;
&lt;span class="n"&gt;other_wrapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_other_fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other_wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;other hi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_other_fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# The original function has not have been additionally called, its&lt;/span&gt;
&lt;span class="c"&gt;# call count remains 2&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All suggested tips on decorators very welcome - just message in the&amp;nbsp;comments.&lt;/p&gt;
&lt;p&gt;Thanks for&amp;nbsp;reading!&lt;/p&gt;
</summary><category term="python"></category></entry><entry><title>Calculating your day rate for spare time freelance work</title><link href="http://jamescooke.info/calculating-your-day-rate-for-spare-time-freelance-work.html" rel="alternate"></link><updated>2013-07-14T20:00:00+01:00</updated><author><name>James</name></author><id>tag:jamescooke.info,2013-07-14:calculating-your-day-rate-for-spare-time-freelance-work.html</id><summary type="html">&lt;p&gt;So you want to do some freelance work and you&amp;#8217;re not sure how much to charge your new client. The most important thing is to not underestimate your value - it frustrates me so much when I hear of a talented coder selling themselves&amp;nbsp;short.&lt;/p&gt;
&lt;div class="section" id="the-calculation"&gt;
&lt;h2&gt;The&amp;nbsp;calculation&lt;/h2&gt;
&lt;p&gt;So when you work for yourself, it&amp;#8217;ll be like your day-job, except you keep the profit and take the additional time and cost&amp;nbsp;overheads.&lt;/p&gt;
&lt;p&gt;This calculation has worked well for me in the past, so I&amp;#8217;m sharing it here. It&amp;#8217;s so simple, I hope it can work for&amp;nbsp;you.&lt;/p&gt;
&lt;script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"&gt;&lt;/script&gt;&lt;div class="math"&gt;
\begin{equation*}
Your Day Rate = \frac {2*Your Annual Salary} {252 - Number Of Days Holiday}
\end{equation*}
&lt;/div&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;2&amp;#8217; is my freelance&amp;nbsp;multiplier.&lt;/li&gt;
&lt;li&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;252&amp;#8217; is the number of working days in a year - an&amp;nbsp;estimate.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="why-is-this-based-on-my-current-salary"&gt;
&lt;h2&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Why is this based on my current&amp;nbsp;salary?&amp;#8221;&lt;/h2&gt;
&lt;p&gt;I assume you will be doing some work similar to your day job. This means that you can use your usual salary as a base unit for calculating your day&amp;nbsp;rate.&lt;/p&gt;
&lt;p&gt;If you don&amp;#8217;t have a day job and all your income will be from self-employment, then I would guess that you will have an idea what your employed market value would be in the kind of business you&amp;#8217;ll be selling your services to&amp;nbsp;is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-is-the-multiplier-2"&gt;
&lt;h2&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Why is the multiplier&amp;nbsp;2?&amp;#8221;&lt;/h2&gt;
&lt;p&gt;Remember - the value of the work that you provide a company is greater than the amount that you are&amp;nbsp;paid:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;In the &lt;span class="caps"&gt;UK&lt;/span&gt;, your employer pays an employment tax - &lt;a class="reference external" href="http://www.hmrc.gov.uk/payerti/getting-started/ni-basics.htm#2"&gt;Employers&amp;#8217; National Insurance Contributions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Your employer paids overheads as part of your employment which you might not be exposed to. The cost of your equipment, heating and lighting your work space, insuring you at work, payroll costs&amp;#8230; All these overheads mount up and you will be taking these on when you&amp;#8217;re working&amp;nbsp;freelance.&lt;/li&gt;
&lt;li&gt;Any successful business must sell the goods or services at a profit. Therefore, if you&amp;#8217;re contributing code to a project, then the future or immediate value of your contribution should be greater than your input for a business to be making a profit from&amp;nbsp;you.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can play with this number of course. A factor of 2 has worked for me in the&amp;nbsp;past.&lt;/p&gt;
&lt;p&gt;One assumption is that you&amp;#8217;re going to do this new project in your free time, probably on the weekends and evenings. Usually this would earn an overtime rate for someone on an hourly wage - usually double time or time and a&amp;nbsp;half.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re in the &lt;span class="caps"&gt;UK&lt;/span&gt;, then more free time will be taken up managing a tax-return, paying &lt;a class="reference external" href="http://www.hmrc.gov.uk/working/intro/selfemployed.htm"&gt;&lt;span class="caps"&gt;HMRC&lt;/span&gt; for additional National Insurance Contributions&lt;/a&gt;, invoicing and keeping records. You need to ensure that this time is covered in some way by the income from your freelance&amp;nbsp;work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-if-my-new-client-is-too-poor-too-rich-to-afford-x"&gt;
&lt;h2&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;What if my new client is too poor / too rich to afford&amp;nbsp;£X?&amp;#8221;&lt;/h2&gt;
&lt;p&gt;Of course, you&amp;#8217;re perfectly allowed to adjust this if you want to give away some of your work at less than the market rate. Remember that your employer is already paying something along the lines of what you&amp;#8217;ve just calculated for your time - ensure you carefully consider how much you should adjust that for someone&amp;nbsp;else.&lt;/p&gt;
&lt;p&gt;In my previous businesses I&amp;#8217;ve charged all clients the same basic rate simply for the reason that it&amp;#8217;s easier on the books and my&amp;nbsp;brain.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-the-end"&gt;
&lt;h2&gt;In the&amp;nbsp;end&lt;/h2&gt;
&lt;p&gt;As you work more freelance jobs you&amp;#8217;ll get a feel for what&amp;#8217;s suitable and what&amp;#8217;s not - I hope this has been&amp;nbsp;helpful.&lt;/p&gt;
&lt;p&gt;Good&amp;nbsp;luck!&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Pyramid London talk - A testing strategy for Pyramid Applications</title><link href="http://jamescooke.info/pyramid-london-talk-a-testing-strategy-for-pyramid-applications.html" rel="alternate"></link><updated>2013-06-16T21:00:00+01:00</updated><author><name>James</name></author><id>tag:jamescooke.info,2013-06-16:pyramid-london-talk-a-testing-strategy-for-pyramid-applications.html</id><summary type="html">&lt;p&gt;Pyramid London meetup &lt;a class="reference external" href="http://www.meetup.com/The-London-Pyramid-Group/events/119944802/"&gt;returned in June&lt;/a&gt; to &lt;a class="reference external" href="http://skillsmatter.com"&gt;Skills Matter&lt;/a&gt;. This time I spoke about testing strategies for Pyramid&amp;nbsp;applications.&lt;/p&gt;
&lt;p&gt;As outlined in the slides below, my current testing framework builds up with doctests, through unit and integration tests to functional / behaviour driven testing on the outside of the application. Hopefully my very basic &amp;#8220;drawn on Google Docs&amp;#8221; diagram of the Pyramid Framework illustrates how each of the testing methods fits within the&amp;nbsp;framework.&lt;/p&gt;
&lt;p&gt;I would like to have been able to talk more about Behaviour Driven Development and &lt;a class="reference external" href="http://pythonhosted.org/behave/"&gt;testing with Behave&lt;/a&gt;, which I&amp;#8217;m enjoying at the moment, but maybe that&amp;#8217;s for another presentation. Again, putting together this presentation was really helpful - it helped me to reflect on the methods we&amp;#8217;re using at the moment, and how I might be able to improve and progress the level of test driven development in my daily&amp;nbsp;work.&lt;/p&gt;
&lt;br&gt;
&lt;script async class="speakerdeck-embed" data-id="57b235d0b8f1013000d27aa19dd2a8cb" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;
&lt;br&gt;&lt;p&gt;&lt;a class="reference external" href="http://skillsmatter.com/podcast/ajax-ria/pyramid-sqlalchemy-testing-and-auth-policy/mh-7528"&gt;Video is available via the SkillsMatter site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Many thanks to &lt;a class="reference external" href="http://lucumr.pocoo.org/"&gt;Armin Ronacher&lt;/a&gt; for his talk on &lt;a class="reference external" href="http://docs.sqlalchemy.org"&gt;SQLAlchemy&lt;/a&gt; at the same Pyramid meetup - the &lt;a class="reference external" href="http://skillsmatter.com/podcast/ajax-ria/pyramid-sqlalchemy-testing-and-auth-policy-4266"&gt;video is also online at SkillsMatter&lt;/a&gt;. As well as the technical details and some hints for things to check out with &lt;span class="caps"&gt;SQLA&lt;/span&gt;, I found Armin&amp;#8217;s thoughts on how the Pyramid community might improve on how we introduce new developers to Pyramid and SQLAlchemy very helpful. I hope I might be able to contribute to that some time in the future.
Hopefully we&amp;#8217;ll see more people at the next Pyramid Meetup which may include a talk on using &lt;a class="reference external" href="http://www.celeryproject.org/"&gt;Celery&lt;/a&gt; with&amp;nbsp;Pyramid.&lt;/p&gt;
</summary><category term="pyramid"></category><category term="talk"></category></entry><entry><title>Pyramid London talk - Pyramid Router</title><link href="http://jamescooke.info/pyramid-london-talk-pyramid-router.html" rel="alternate"></link><updated>2013-05-08T23:00:00+01:00</updated><author><name>James</name></author><id>tag:jamescooke.info,2013-05-08:pyramid-london-talk-pyramid-router.html</id><summary type="html">&lt;p&gt;Our first &lt;a class="reference external" href="http://www.meetup.com/The-London-Pyramid-Group/events/114457692/"&gt;Pyramid London meetup&lt;/a&gt; was kindly hosted at &lt;a class="reference external" href="http://skillsmatter.com"&gt;Skills Matter&lt;/a&gt;, who have &lt;a class="reference external" href="http://skillsmatter.com/podcast/home/routing-traversal-and-url-dispatch"&gt;posted the video of my talk on their page for the meetup&lt;/a&gt;.&lt;/p&gt;
&lt;br&gt;
&lt;script async class="speakerdeck-embed" data-id="76686b40b8ed01307b196e084453428f" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"&gt;&lt;/script&gt;
&lt;br&gt;&lt;p&gt;All the code I demonstrated is on &lt;a class="reference external" href="https://github.com/jamescooke/pyramid-london-talk"&gt;GitHub in the pyramid-london-talk repository&lt;/a&gt; - Please note that the traversal code is in the traversal branch, not in a separate&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;I learned loads from preparing the demonstration code and chatting to everyone that attended - so thanks and hope to see you at the next meetup in&amp;nbsp;June!&lt;/p&gt;
</summary><category term="pyramid"></category><category term="talk"></category></entry><entry><title>Reincublog Django app</title><link href="http://jamescooke.info/reincublog-django-app.html" rel="alternate"></link><updated>2013-04-28T13:00:00+01:00</updated><author><name>James</name></author><id>tag:jamescooke.info,2013-04-28:reincublog-django-app.html</id><summary type="html">&lt;p&gt;Reincublog is a Django app that I was asked to code as part of the recruitment process at &lt;a class="reference external" href="http://www.reincubate.com/"&gt;Reincubate&lt;/a&gt;. It&amp;#8217;s a weekend of glue code which I was set to see if I am a competent Django programmer. I&amp;#8217;m not sure that it&amp;#8217;s the kind of test that I show my best at - I&amp;#8217;m more of an algorithm&amp;nbsp;guy.&lt;/p&gt;
&lt;p&gt;However, after living on GitHub for a few months, the repo has picked up a couple of stars, and because I like to keep a super clean GitHub account, I&amp;#8217;ve decided to clean it out of my&amp;nbsp;account.&lt;/p&gt;
&lt;p&gt;So, from today the &lt;a class="reference external" href="https://github.com/shonenada/reincublog"&gt;Reincublog code&lt;/a&gt; will live on &lt;a class="reference external" href="https://github.com/shonenada"&gt;shonenada&amp;#8217;s GitHub&lt;/a&gt; hopefully it can grow and be&amp;nbsp;useful.&lt;/p&gt;
</summary><category term="django"></category></entry><entry><title>Migrating from Django 1.4 to 1.5 - Lessons learned</title><link href="http://jamescooke.info/migrating-from-django-14-to-15-lessons-learned.html" rel="alternate"></link><updated>2013-03-29T19:00:00+00:00</updated><author><name>James</name></author><id>tag:jamescooke.info,2013-03-29:migrating-from-django-14-to-15-lessons-learned.html</id><summary type="html">&lt;p&gt;From &lt;a class="reference external" href="https://twitter.com/ryankask/"&gt;Ryan Kaskel&lt;/a&gt;&amp;#8216;s talk at &lt;a class="reference external" href="http://www.meetup.com/The-London-Django-Meetup-Group/"&gt;Django London&lt;/a&gt; in November last year, I guessed that upgrading the &lt;a class="reference external" href="https://github.com/jamescooke/actionguide"&gt;Action Guide code&lt;/a&gt; from Django 1.4 to 1.5 might have created some issues with users (&lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/releases/1.5/#configurable-user-model"&gt;user models have changed in Django 1.5 to allow more customisation&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;However, as it turns out, the main problems were with settings and urls, the users were fine. My main take-aways&amp;nbsp;were:&lt;/p&gt;
&lt;div class="section" id="url-formats-have-changed-now-need-quotes"&gt;
&lt;h2&gt;Url formats have changed - now need&amp;nbsp;quotes&lt;/h2&gt;
&lt;p&gt;The Django team had already updated the &lt;cite&gt;url&lt;/cite&gt; tag to accept the path parameter as a string, but the old syntax was still allowed. 1.4 allowed both types of syntax, the team having provided &lt;cite&gt;{% load url from future %}&lt;/cite&gt; for those that wanted to update their templates to the new&amp;nbsp;syntax.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the warning from the &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.5/ref/templates/builtins/#std:templatetag-url"&gt;&lt;span class="caps"&gt;URL&lt;/span&gt; tag documentation&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="|filename|/images/url-warning.png" src="http://jamescooke.info/static/images/url-warning.png" /&gt;
&lt;p&gt;This was a reasonably easy change to implement - some search and replace and all &lt;cite&gt;url&lt;/cite&gt; tags can be easily hunted down and&amp;nbsp;changed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="read-up-on-the-settings-no-allowed-hosts-makes-500s"&gt;
&lt;h2&gt;Read up on the settings - no ALLOWED_HOSTS makes&amp;nbsp;500s&lt;/h2&gt;
&lt;p&gt;This was the real&amp;nbsp;killer.&lt;/p&gt;
&lt;p&gt;There is a &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts"&gt;new ALLOWED_HOSTS settings in 1.5&lt;/a&gt; required to get Django and running in non-debug&amp;nbsp;mode.&lt;/p&gt;
&lt;p&gt;Worst thing about the implementation of this new setting is that I couldn&amp;#8217;t get a single bit of debugging output it through &lt;cite&gt;wsgi&lt;/cite&gt; on WebFaction - just a 500 error on every page load when I took the site out of debug&amp;nbsp;mode.&lt;/p&gt;
&lt;p&gt;I was so confused that I posted &lt;a class="reference external" href="http://stackoverflow.com/questions/15605185/django-1-5-url-deprecation-warning-causes-500-error-in-webfaction-apache-wsgi/15626247"&gt;this question on StackOverflow&lt;/a&gt;, thinking the problem was &lt;cite&gt;url&lt;/cite&gt; warnings being shown as errors and halting the &lt;cite&gt;wsgi&lt;/cite&gt;. In the end, just adding &lt;cite&gt;ALLOWED_HOSTS&lt;/cite&gt; fixed everything up&amp;nbsp;great.&lt;/p&gt;
&lt;p&gt;My main problem was that I scanned the docs, tested the migration on localhost in dev mode, and just expected everything to deploy. With Captain Hindsight, I&amp;#8217;d have RTFMed much harder before deploying - a lesson for the&amp;nbsp;future.&lt;/p&gt;
&lt;p&gt;Apart from that, everything works really well. &lt;strong&gt;Have&amp;nbsp;fun!&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="django"></category></entry><entry><title>Pelican Svbtle theme tweaks</title><link href="http://jamescooke.info/pelican-svbtle-theme-tweaks.html" rel="alternate"></link><updated>2013-02-21T19:40:00+00:00</updated><author><name>James</name></author><id>tag:jamescooke.info,2013-02-21:pelican-svbtle-theme-tweaks.html</id><summary type="html">&lt;p&gt;My first experiments with &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; to run this blog have been good - it&amp;#8217;s a great way to publish static pages quickly and I find it much easier to manage than&amp;nbsp;Octopress.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s built on a version of the &lt;a class="reference external" href="https://github.com/wting/pelican-svbtle"&gt;Pelican-svbtle theme&lt;/a&gt;. There were some problems with the theme in its current form, so I&amp;#8217;ve forked &lt;a class="reference external" href="https://github.com/CNBorn/pelican-svbtle"&gt;CNBorn&amp;#8217;s already adjusted version&lt;/a&gt; and cleaned out some of the &lt;span class="caps"&gt;LESS&lt;/span&gt; and templates - &lt;a class="reference external" href="https://github.com/jamescooke/pelican-svbtle"&gt;my fork is on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, this theme isn&amp;#8217;t going to stay. &lt;a class="reference external" href="http://www.thesocialspaces.co.uk/"&gt;Paul&lt;/a&gt; has been working on some flat &lt;span class="caps"&gt;HTML&lt;/span&gt; based on Bootstrap to make a new clean theme. Once that&amp;#8217;s stable, I&amp;#8217;ll plug in some Pelican / Jinja2 tags and hopefully this site will have a new clean theme&amp;nbsp;soon.&lt;/p&gt;
</summary><category term="github"></category><category term="python"></category><category term="pelican"></category><category term="theme"></category></entry><entry><title>jsFiddle documentation update</title><link href="http://jamescooke.info/jsfiddle-documentation-update.html" rel="alternate"></link><updated>2013-01-25T19:40:00+00:00</updated><author><name>James</name></author><id>tag:jamescooke.info,2013-01-25:jsfiddle-documentation-update.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://doc.jsfiddle.net/"&gt;Updated documentation&lt;/a&gt; for &lt;a class="reference external" href="http://jsfiddle.net/"&gt;jsFiddle&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/jsfiddle/jsfiddle-docs-alpha/commit/ef0f234e44e5a6d6791c09e672364fdf9518a31a"&gt;merged by Piotr&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Includes a new &lt;a class="reference external" href="http://doc.jsfiddle.net/tutorial.html"&gt;tutorial&lt;/a&gt; - but images are already out of&amp;nbsp;date!&lt;/p&gt;
&lt;p&gt;jsFiddle is such a great tool and my goal for the tutorial was to create a simple introduction which first time students would be able to understand and&amp;nbsp;execute.&lt;/p&gt;
</summary><category term="github"></category><category term="documentation"></category></entry><entry><title>Setting up this homepage with Pelican</title><link href="http://jamescooke.info/setting-up-this-homepage-with-pelican.html" rel="alternate"></link><updated>2013-01-20T17:25:00+00:00</updated><author><name>James</name></author><id>tag:jamescooke.info,2013-01-20:setting-up-this-homepage-with-pelican.html</id><summary type="html">&lt;p&gt;This page has been through a lot in the last ten&amp;nbsp;years.&lt;/p&gt;
&lt;p&gt;Since starting work at &lt;a class="reference external" href="http://quib.ly"&gt;Quibly&lt;/a&gt;, I&amp;#8217;ve had a lot more time to code and it&amp;#8217;s exactly what I wanted, hopefully it&amp;#8217;ll continue. The result of that is that I&amp;#8217;ve got more to write about&amp;#8230; The code that I develop at work, fixes I make to open source libraries and general things I learn, primarily about Python and web - hopefully all valuable and worth&amp;nbsp;sharing.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m experimenting with &lt;a class="reference external" href="https://github.com/getpelican/pelican"&gt;Pelican&lt;/a&gt; - a static blog generator written in Python. It&amp;#8217;s excellent and noticably easier than Jekyll - probably because I&amp;#8217;m much more clued up in Python than Ruby. I&amp;#8217;m lazy, so I&amp;#8217;m hosting the outputted static files in the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gh-pages&lt;/span&gt;&lt;/tt&gt; branch of the &lt;a class="reference external" href="https://github.com/jamescooke/blog/"&gt;blog&amp;#8217;s repository&lt;/a&gt; to take advantage of &lt;a class="reference external" href="http://pages.github.com/"&gt;GitHub Pages&amp;#8217; free hosting features&lt;/a&gt; - thanks&amp;nbsp;GitHub!&lt;/p&gt;
&lt;p&gt;In addition, I found &lt;a class="reference external" href="http://www.davidfischer.name/2012/12/quick-note-pelican-github/"&gt;this article by David Fischer&lt;/a&gt; very helpful. Particularly the suggestion of adding the &lt;tt class="docutils literal"&gt;&lt;span class="caps"&gt;CNAME&lt;/span&gt;&lt;/tt&gt; copy command to the &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; to get GitHub Pages one configuration requirement and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;gph-import&lt;/span&gt;&lt;/tt&gt; working nicely together. Plus David pointed out that Pelican already has a &lt;tt class="docutils literal"&gt;github&lt;/tt&gt; target in the &lt;tt class="docutils literal"&gt;Makefile&lt;/tt&gt; which I hadn&amp;#8217;t noticed and is now what I use to push articles&amp;nbsp;live.&lt;/p&gt;
&lt;p&gt;All in all - great and&amp;nbsp;simple.&lt;/p&gt;
</summary><category term="github"></category><category term="python"></category><category term="pelican"></category></entry><entry><title>Got the Stack Overflow tumbleweed badge for Mako filters question</title><link href="http://jamescooke.info/got-the-stack-overflow-tumbleweed-badge-for-mako-filters-question.html" rel="alternate"></link><updated>2013-01-20T16:40:00+00:00</updated><author><name>James</name></author><id>tag:jamescooke.info,2013-01-20:got-the-stack-overflow-tumbleweed-badge-for-mako-filters-question.html</id><summary type="html">&lt;p&gt;Last week I posted a question on Stack Overflow - &amp;#8220;&lt;a class="reference external" href="http://stackoverflow.com/questions/14215591/mako-template-filter-ordering"&gt;Mako template filter ordering&lt;/a&gt;&amp;#8221; - this week it earned the &lt;a class="reference external" href="http://stackoverflow.com/badges/63/tumbleweed"&gt;Tumbleweed badge&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s always a little concerning when libraries and toolkits you&amp;#8217;re using in a project have forums and message boards that are a little too quiet - is there a bad smell? Is there something bad I don&amp;#8217;t know about this tech? Even worse is when you look around those quiet forums (or tags in Stack Overflow) you find comments like this about the library you&amp;#8217;re being asked to&amp;nbsp;use:&lt;/p&gt;
&lt;img alt="|filename|/images/mako.png" src="http://jamescooke.info/static/images/mako.png" /&gt;
&lt;p&gt;You should listen to a &lt;a class="reference external" href="http://stackoverflow.com/questions/10870379/is-there-an-equivalent-to-django-template-filters-in-mako"&gt;Stack Overflow moderator who has 93K points&lt;/a&gt; at time of writing&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;Meanwhile&amp;#8230; I haven&amp;#8217;t found the reason for the template filter ordering being strange - and I still think that the &lt;tt class="docutils literal"&gt;h&lt;/tt&gt; filter is putting itself last in the mako render order, but now I&amp;#8217;ve got a work around, I&amp;#8217;m going back to post&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Maybe 10 more people will see it before Easter - it might even help&amp;nbsp;someone.&lt;/p&gt;
</summary><category term="mako"></category><category term="python"></category></entry><entry><title>Password cases and test fixes on pyramid_simpleauth</title><link href="http://jamescooke.info/password-cases-and-test-fixes-on-pyramid_simpleauth.html" rel="alternate"></link><updated>2012-11-30T12:00:00+00:00</updated><author><name>James</name></author><id>tag:jamescooke.info,2012-11-30:password-cases-and-test-fixes-on-pyramid_simpleauth.html</id><summary type="html">&lt;p&gt;At &lt;a class="reference external" href="http://quib.ly"&gt;Quibly&lt;/a&gt; we&amp;#8217;re using Pyramid at the centre of a Python framework. Providing user functionality is the &lt;a class="reference external" href="https://github.com/thruflo/pyramid_simpleauth"&gt;pyramid_simpleauth&lt;/a&gt;&amp;nbsp;library.&lt;/p&gt;
&lt;p&gt;While writing itegration tests before we put the site live, I found that my test users we not able to authenticate with their testing passwords (usually just a simple string like &amp;#8216;Password&amp;#8217;). Digging inside the simpleauth library, I found some fixes necessary to how cases are handled by the lib - plus also fixed some doctests while I was at&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;These have all been merged in now and the library rolled up a&amp;nbsp;version.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;GitHub Issue: &lt;a class="reference external" href="https://github.com/thruflo/pyramid_simpleauth/issues/5"&gt;Any upper case characters in passwords break&amp;nbsp;auth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub Pull Request: &lt;a class="reference external" href="https://github.com/thruflo/pyramid_simpleauth/pull/7"&gt;Password cases possible&amp;nbsp;fix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="github"></category><category term="python"></category><category term="pyramid"></category></entry><entry><title>Django-mailchimp compatability with v1.3 API</title><link href="http://jamescooke.info/django-mailchimp-compatability-with-v13-api.html" rel="alternate"></link><updated>2012-09-25T07:14:00+01:00</updated><author><name>James</name></author><id>tag:jamescooke.info,2012-09-25:django-mailchimp-compatability-with-v13-api.html</id><summary type="html">&lt;p&gt;For a Fublo project with &lt;a class="reference external" href="http://www.neuxpower.com/"&gt;Neuxpower&lt;/a&gt;, we had to communicate with &lt;a class="reference external" href="http://apidocs.mailchimp.com/"&gt;Mailchimp via their &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;. On Django one of the best libraries for this is &lt;a class="reference external" href="https://github.com/piquadrat/django-mailchimp"&gt;django-mailchimp&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, in its previous state django-mailchimp wasn&amp;#8217;t able to specify a &lt;tt class="docutils literal"&gt;send_welcome&lt;/tt&gt; parameter which lets Mailchimp know whether it should send out a list welcome message when a new user subscribes. For the project, we were managing the signup explicitly with Neuxpower&amp;#8217;s code, so no welcome message was required and the default for Mailchimp was &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; for sending meaning that Neuxpower&amp;#8217;s new customers would get hit with a double welcome message&amp;#8230; Not&amp;nbsp;desirable.&lt;/p&gt;
&lt;p&gt;This small change is now merged in with the library, which has rolled up to a &amp;#8216;v1.3&amp;#8217; status as there is no backward&amp;nbsp;compatibilty.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/piquadrat/django-mailchimp/issues/5"&gt;GitHub&amp;nbsp;Issue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/piquadrat/django-mailchimp/pull/6"&gt;GitHub Pull&amp;nbsp;Request&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="github"></category><category term="python"></category><category term="django"></category><category term="mailchimp"></category></entry><entry><title>Fixing exception in django-menu</title><link href="http://jamescooke.info/fixing-exception-in-django-menu.html" rel="alternate"></link><updated>2012-05-05T19:40:00+01:00</updated><author><name>James</name></author><id>tag:jamescooke.info,2012-05-05:fixing-exception-in-django-menu.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/rossp/django-menu/"&gt;django-menu&lt;/a&gt; is a nice simple library for building very simple menus. However, when a site is loaded for the first time, the menu structure was not configured and so it was throwing a &lt;tt class="docutils literal"&gt;DoesNotExist&lt;/tt&gt; Exception.&lt;/p&gt;
&lt;p&gt;This tiny pull request simply wrapped the call to the menu in a &lt;tt class="docutils literal"&gt;try&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;except&lt;/tt&gt; so that new sites using django-menu won&amp;#8217;t fall over on first&amp;nbsp;load.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/rossp/django-menu/pull/5"&gt;GitHub&amp;nbsp;Issue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="github"></category><category term="python"></category><category term="django"></category></entry></feed>