<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>James Cooke</title><link href="http://jamescooke.info/" rel="alternate"></link><link href="http://jamescooke.info/feeds/Code.atom.xml" rel="self"></link><id>http://jamescooke.info/</id><updated>2013-10-22T20:00:00+01:00</updated><entry><title>Things to remember aboutÂ decorators</title><link href="http://jamescooke.info/things-to-remember-about-decorators.html" rel="alternate"></link><updated>2013-10-22T20:00:00+01:00</updated><author><name>James</name></author><id>tag:jamescooke.info,2013-10-22:things-to-remember-about-decorators.html</id><summary type="html">&lt;p&gt;After an interview question about Python decorators which I stumbled over, I
promised myself that I would improve my knowledge of this metaprogramming&amp;nbsp;technique.&lt;/p&gt;
&lt;p&gt;These are my notes to myself on decorators - maybe they&amp;#8217;ll be helpful to
someone else who&amp;#8217;s improving their knowledge of decorators&amp;nbsp;too.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;A decorator is pure Pythonic syntatic&amp;nbsp;sugar.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;A decorator is a Python callable that receives the decorated function and
returns a new function in its&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;For example, if there is a decorator called &lt;cite&gt;my_decorator&lt;/cite&gt; and we want to
decorate &lt;cite&gt;my_func&lt;/cite&gt; then&amp;#8230;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@my_decorator&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;some stuff&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Is equivalent to&amp;nbsp;writing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_func&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;some stuff&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="n"&gt;my_func&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The decorator callable is executed at load time, not at execution time. Here
is an example of a silly decorator that prints &amp;#8220;Hello World&amp;#8221; when the Python
file is loaded - there is nothing else in the&amp;nbsp;file.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;hello.py&lt;/cite&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;

&lt;span class="nd"&gt;@say_hello&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;nothing&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c"&gt;# Do nothing just return&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Run it on the command line, and &amp;#8220;Hello World&amp;#8221; appears when the &lt;cite&gt;nothing&lt;/cite&gt;
function is&amp;nbsp;decorated.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;python hello.py
Hello World
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When writing a decorator, remember to patch over the docstring of the wrapped
function. This can be done by accessing the passed function&amp;#8217;s &lt;cite&gt;__doc__&lt;/cite&gt;
attribute. Failing to do so will prevent doctest from testing the decorated&amp;nbsp;function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c"&gt;# Pass through the doc string&lt;/span&gt;
    &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;When unit testing decorators, one strategy can be to manually call the
decorator on a mocked object and inspect how it interacts with&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a caching function which is used to speed up the Fibonacci&amp;nbsp;series.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c"&gt;# Keep a dict of values returned already&lt;/span&gt;
    &lt;span class="n"&gt;vals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;has_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now use the cache function as a&amp;nbsp;decorator.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@cache&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Fibonacci series&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; fib(1)&lt;/span&gt;
&lt;span class="sd"&gt;    1&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; fib(2)&lt;/span&gt;
&lt;span class="sd"&gt;    2&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Must be greater than 0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fib&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here&amp;#8217;s a unittest that asserts that the cache function only allows calls
through when there is no value saved in the &lt;cite&gt;vals&lt;/cite&gt; dict.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mock&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestCashDecorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;my_fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;my_fn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;my_fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;

        &lt;span class="n"&gt;wrapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;# First call gives a call count of 1&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# Second call keeps the call count at 1 - the cached value is used&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;# Subsequent call with a new value increased the call count&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;hi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Make sure the scope of variables used in the decorators is correct, this is
&lt;a class="reference external" href="http://simeonfranklin.com/blog/2012/jul/1/python-decorators-in-12-steps/"&gt;an interesting article by Simeon Franklin about decorators and scope&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If in doubt, extend any tests to test a second decorated function and ensure
that the two functions do not effect each&amp;nbsp;other.&lt;/p&gt;
&lt;p&gt;Below is a test that aims to check that cache dictionaries are not shared
between instances of the &lt;cite&gt;cache&lt;/cite&gt; decorator, it is appended to the
&lt;cite&gt;test_cache&lt;/cite&gt; test&amp;nbsp;above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Check that the vals dict isn&amp;#39;t shared between other decor&lt;/span&gt;
&lt;span class="n"&gt;my_other_fn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Mock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;other fn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;my_other_fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;other hi&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;# Create other wrapped function&lt;/span&gt;
&lt;span class="n"&gt;other_wrapped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_other_fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other_wrapped&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;other hi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_other_fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# The original function has not have been additionally called, its&lt;/span&gt;
&lt;span class="c"&gt;# call count remains 2&lt;/span&gt;
&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_fn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All suggested tips on decorators very welcome - just message in the&amp;nbsp;comments.&lt;/p&gt;
&lt;p&gt;Thanks for&amp;nbsp;reading!&lt;/p&gt;
</summary><category term="python"></category></entry><entry><title>Migrating from Django 1.4 to 1.5 - LessonsÂ learned</title><link href="http://jamescooke.info/migrating-from-django-14-to-15-lessons-learned.html" rel="alternate"></link><updated>2013-03-29T19:00:00+00:00</updated><author><name>James</name></author><id>tag:jamescooke.info,2013-03-29:migrating-from-django-14-to-15-lessons-learned.html</id><summary type="html">&lt;p&gt;From &lt;a class="reference external" href="https://twitter.com/ryankask/"&gt;Ryan Kaskel&lt;/a&gt;&amp;#8216;s talk at &lt;a class="reference external" href="http://www.meetup.com/The-London-Django-Meetup-Group/"&gt;Django London&lt;/a&gt; in November last year, I guessed that upgrading the &lt;a class="reference external" href="https://github.com/jamescooke/actionguide"&gt;Action Guide code&lt;/a&gt; from Django 1.4 to 1.5 might have created some issues with users (&lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/releases/1.5/#configurable-user-model"&gt;user models have changed in Django 1.5 to allow more customisation&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;However, as it turns out, the main problems were with settings and urls, the users were fine. My main take-aways&amp;nbsp;were:&lt;/p&gt;
&lt;div class="section" id="url-formats-have-changed-now-need-quotes"&gt;
&lt;h2&gt;Url formats have changed - now need&amp;nbsp;quotes&lt;/h2&gt;
&lt;p&gt;The Django team had already updated the &lt;cite&gt;url&lt;/cite&gt; tag to accept the path parameter as a string, but the old syntax was still allowed. 1.4 allowed both types of syntax, the team having provided &lt;cite&gt;{% load url from future %}&lt;/cite&gt; for those that wanted to update their templates to the new&amp;nbsp;syntax.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the warning from the &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.5/ref/templates/builtins/#std:templatetag-url"&gt;&lt;span class="caps"&gt;URL&lt;/span&gt; tag documentation&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="|filename|/images/url-warning.png" src="http://jamescooke.info/static/images/url-warning.png" /&gt;
&lt;p&gt;This was a reasonably easy change to implement - some search and replace and all &lt;cite&gt;url&lt;/cite&gt; tags can be easily hunted down and&amp;nbsp;changed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="read-up-on-the-settings-no-allowed-hosts-makes-500s"&gt;
&lt;h2&gt;Read up on the settings - no ALLOWED_HOSTS makes&amp;nbsp;500s&lt;/h2&gt;
&lt;p&gt;This was the real&amp;nbsp;killer.&lt;/p&gt;
&lt;p&gt;There is a &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts"&gt;new ALLOWED_HOSTS settings in 1.5&lt;/a&gt; required to get Django and running in non-debug&amp;nbsp;mode.&lt;/p&gt;
&lt;p&gt;Worst thing about the implementation of this new setting is that I couldn&amp;#8217;t get a single bit of debugging output it through &lt;cite&gt;wsgi&lt;/cite&gt; on WebFaction - just a 500 error on every page load when I took the site out of debug&amp;nbsp;mode.&lt;/p&gt;
&lt;p&gt;I was so confused that I posted &lt;a class="reference external" href="http://stackoverflow.com/questions/15605185/django-1-5-url-deprecation-warning-causes-500-error-in-webfaction-apache-wsgi/15626247"&gt;this question on StackOverflow&lt;/a&gt;, thinking the problem was &lt;cite&gt;url&lt;/cite&gt; warnings being shown as errors and halting the &lt;cite&gt;wsgi&lt;/cite&gt;. In the end, just adding &lt;cite&gt;ALLOWED_HOSTS&lt;/cite&gt; fixed everything up&amp;nbsp;great.&lt;/p&gt;
&lt;p&gt;My main problem was that I scanned the docs, tested the migration on localhost in dev mode, and just expected everything to deploy. With Captain Hindsight, I&amp;#8217;d have RTFMed much harder before deploying - a lesson for the&amp;nbsp;future.&lt;/p&gt;
&lt;p&gt;Apart from that, everything works really well. &lt;strong&gt;Have&amp;nbsp;fun!&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="django"></category></entry><entry><title>Pelican Svbtle themeÂ tweaks</title><link href="http://jamescooke.info/pelican-svbtle-theme-tweaks.html" rel="alternate"></link><updated>2013-02-21T19:40:00+00:00</updated><author><name>James</name></author><id>tag:jamescooke.info,2013-02-21:pelican-svbtle-theme-tweaks.html</id><summary type="html">&lt;p&gt;My first experiments with &lt;a class="reference external" href="http://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; to run this blog have been good - it&amp;#8217;s a great way to publish static pages quickly and I find it much easier to manage than&amp;nbsp;Octopress.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s built on a version of the &lt;a class="reference external" href="https://github.com/wting/pelican-svbtle"&gt;Pelican-svbtle theme&lt;/a&gt;. There were some problems with the theme in its current form, so I&amp;#8217;ve forked &lt;a class="reference external" href="https://github.com/CNBorn/pelican-svbtle"&gt;CNBorn&amp;#8217;s already adjusted version&lt;/a&gt; and cleaned out some of the &lt;span class="caps"&gt;LESS&lt;/span&gt; and templates - &lt;a class="reference external" href="https://github.com/jamescooke/pelican-svbtle"&gt;my fork is on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, this theme isn&amp;#8217;t going to stay. &lt;a class="reference external" href="http://www.thesocialspaces.co.uk/"&gt;Paul&lt;/a&gt; has been working on some flat &lt;span class="caps"&gt;HTML&lt;/span&gt; based on Bootstrap to make a new clean theme. Once that&amp;#8217;s stable, I&amp;#8217;ll plug in some Pelican / Jinja2 tags and hopefully this site will have a new clean theme&amp;nbsp;soon.&lt;/p&gt;
</summary><category term="github"></category><category term="python"></category><category term="pelican"></category><category term="theme"></category></entry><entry><title>Got the Stack Overflow tumbleweed badge for Mako filtersÂ question</title><link href="http://jamescooke.info/got-the-stack-overflow-tumbleweed-badge-for-mako-filters-question.html" rel="alternate"></link><updated>2013-01-20T16:40:00+00:00</updated><author><name>James</name></author><id>tag:jamescooke.info,2013-01-20:got-the-stack-overflow-tumbleweed-badge-for-mako-filters-question.html</id><summary type="html">&lt;p&gt;Last week I posted a question on Stack Overflow - &amp;#8220;&lt;a class="reference external" href="http://stackoverflow.com/questions/14215591/mako-template-filter-ordering"&gt;Mako template filter ordering&lt;/a&gt;&amp;#8221; - this week it earned the &lt;a class="reference external" href="http://stackoverflow.com/badges/63/tumbleweed"&gt;Tumbleweed badge&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s always a little concerning when libraries and toolkits you&amp;#8217;re using in a project have forums and message boards that are a little too quiet - is there a bad smell? Is there something bad I don&amp;#8217;t know about this tech? Even worse is when you look around those quiet forums (or tags in Stack Overflow) you find comments like this about the library you&amp;#8217;re being asked to&amp;nbsp;use:&lt;/p&gt;
&lt;img alt="|filename|/images/mako.png" src="http://jamescooke.info/static/images/mako.png" /&gt;
&lt;p&gt;You should listen to a &lt;a class="reference external" href="http://stackoverflow.com/questions/10870379/is-there-an-equivalent-to-django-template-filters-in-mako"&gt;Stack Overflow moderator who has 93K points&lt;/a&gt; at time of writing&amp;nbsp;right?&lt;/p&gt;
&lt;p&gt;Meanwhile&amp;#8230; I haven&amp;#8217;t found the reason for the template filter ordering being strange - and I still think that the &lt;tt class="docutils literal"&gt;h&lt;/tt&gt; filter is putting itself last in the mako render order, but now I&amp;#8217;ve got a work around, I&amp;#8217;m going back to post&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;Maybe 10 more people will see it before Easter - it might even help&amp;nbsp;someone.&lt;/p&gt;
</summary><category term="mako"></category><category term="python"></category></entry></feed>